JS Part1: Intro, History and Declaring Variables
##################################################
1995: Netscape, Brendan Eich - founder of JS
Late 1990s: Dynamic HTML 
2008: Chrome and V8 (written in c++)
2009: nodejs (JS for server side development)
2011: jQuery
2012: JSON
2013: MongoDB (JS for database work)
2013: Proliferation of dozens of frameworks for frontend development (reacr, AngularJS, vue, EJS, webpack)
MERN stack
M - MongoDB
E - Express (REST APIs on HTTP)
R - React
N - Nodejs

webkit is for css
v8 is for JS

Problems with var:
1. It is Redeclarable
var a = 5;
var a = true;
2. var is function scope
3. var is hoisted
4. var is added as a property in window

Actual name of javascript is Ecmascript 
that's why JS versions have ES prefix.
for example: 
ES1995 or ES1
ES2015 or ES6
ES2016 or ES7
TC39 committee inside ECMA is responsible for handling the language specification for JS.

...
ES2021 or ES12 Latest Phase
ES2022 or ES13

https://javascript.info/

########################################################
JS-Part2

Functions in JS:
    - Ways of creating a function in JS
        1. Funtion Declaration
            fnction name() {
                //function body
            }
        2. Function Expression
            const name = function() {
                //function body
            }
        3. Arrow Function
            const name = () => {
                //function body
            }
    - Handling Arguments in JS
    -  Scope(Closure)
        1. Global Scope
        2. Function Scope
        3. Block Scope
            only followed by let and const but not for var
    -  Hoisting for var and function declarations

windows + shift + s -- shortcut to select the screenshot

Important Points
#####################################
1. which one should you use among var, let and const?
var shouldn't be used anymore. its not recommended.
let - if the variables value will change
const - if the variables value will never change

2. angular, react js will helps you to create html n css programmatically. Deals with the frontend of the application.
node js, express and MongoDB deals with the backend of the application.

3. Guess the output?
function test() {
    if(true) {
        var t = 1;
    }
    console.log(t * 5);
}
test();

A. No error

4. Guess the output?
function is_senior() {
    {
        const AGE_LIMIT = 60;
    }
    if(age > AGE_LIMIT) {
        return true;
    }
    else {
        return false;
    }
    
}
is_senior(58);

A. error - AGE_LIMIT is not accessible outside Block

5. What is the problem with this code?
let MAX_AGE = 60;
function is_senior() {
    let MAX_AGE = 55;
    if(age > MAX_AGE) {
        return true;
    }
    else {
        return false;
    }
}
is_senior(58);

A. Yes, error - MAX_AGE is already defined outside of the function.

6. What is the problem with this code?
var MAX_AGE = 60;
function is_senior() {
    var MAX_AGE = 55;
    if(age > MAX_AGE) {
        return true;
    }
    else {
        return false;
    }
}
is_senior(58);

A. No Error. But it is not recommended to create duplicate variables

7. How will this code be interpretedby compiler?

    i. 
        add(10, 20)
        function add(num1, num2) {
            return num1 + num2;
        } 
    a:  function add (num1, num2) {
            return num1 + num2;
        } 
        add(10,20);

    ii.
        function multiply_10(num) {
            a = 10;
            const result = num * a;
            a = 0;
            var a = 0;
            return result;
        }
    a: 
        function multiply_10(num) {
            a = undefined;
            const result = num * a;
            a = 0;
            var a = 0;
            return result;
        }

8. Does let and const allow hoisting?
No

####################################################

JS Part 3: Higher Order Functions, Call stack
#############################################

Higher order Functions
    These are functions which return or take another fnction as Arguments

Call Stack in JS:
    What it is?
        It's just an ordered list of function name which helps us see the execution trail
    Why it is used?
        It's used during debugging.

#####################################################
JS Part-4: DataTypes in JS

Primitive Values (immutable)
    Boolean Values
    Null type 
    undefined type
    number type
        64 bit double precision
    bigint type
    string type
    symbol type
Reference
    Objects
    Arrays
    Maps
    sets 

What is the use of undefined type?
1. is func a higher order function?
function print() {
    console.log("Hello World");
}
function func() {
    return function() {
        print();
    }
}

A: Yes, beacuse func is returning a function

2. does func have a valid callback?
function print() {
    console.log("Hello World");
}
function func() {
    print();
    callback();
}
A: No, because we not invoking callback in func

3. does func have a valid callback?
function print() {
    console.log("Hello World");
}
function func(callback) {
    print();
    callback();
}
A: Yes

4. What are closures in JS and why are they used?
Closures asre code construct where inordrr to make something(variable/ function)
private, we wrap it inside another function.
Eg: 
function closureFunction() {
    let somePrivateVar = 0;
    return function() {
        //using somePrivateVar;
    }
}


#################################################################################################
JS Part -6: Arrays

intro to Arrays
    class
    utility functions
    functions
    properties

Array properties
    array.length
    array.isArray()

array loop methods
    Map
    filter
    reduce
    forEach
    some
    every

Mutation functions in array
    array.push()
    array.pop()
    array.shift()
    array.unshift()
    array.slice()

Arrow Functions
    1. If single return statment then that return statement with curly braces can be ommitted.
            Example: 
            const add = (num1, num2) => {
                return num1 + num2;
            }
            const add = (num1, num2) => num1 + num2;

        2. If single argument then parenthesis can be ommitted.
            Example:
            const square = (num) => num * num;
            const square = num => num * num;

            
Important Notes:
############################################
1. In arrays, index starts from zero.
2. iterator function take a function as an Arguments
and signature for those functions argument is like below:
(item, index, arr) => {

}

2. please tell the o/p of the given code?
new Array(10).fill(5).filter(item => item %2 === 0);
a. arr is []
b. arr is [5,5]
c. arr is [5,5,5,5,5,5,5,5,5,5]

3. what are the difference b/w for loop and forEach loop?
A. 
i. forEach loop will execute for all items of the array always.
    but for loop can be discontinued earlier.
ii. we cannot break from forEach loop but we can break from for loop.
iii. forEach loop will not modify the array content while iterating over it
     but same will not applicable to for loop.


###########################################################################################
JS Part-7: Objects

Objects 
    Syntax of an object:
        {
            key1: value,
            key2: value,
            ..
            ..
        }
    Basics
        ways of accessing properties in an object
            1. Dot notation
                const obj = {name: "Lavs", age = 24}
                obj.name //Lavs
            2. [] square bracket notation
                const obj = {name: "Lavs", age = 24}
                obj["name"] //Lavs
    Data Structures
    Object class
Object Properties and methods
    object.keys()
    object.values()
    object.entries()
    object.hasOwnProperty()

###################################################################
Important Notes

1. Given this code
 const cars = [
    {brand: "Honda", make: "Jazz", year: 2018, 
    owner : {
        name: "Morpheus",
        registration: "awe17898"
    }},
    {brand: "Maruthi", make: "Baleno", year: 2022,
    owner : {
        name: "Mortin",
        registration: "awe1nks98"
    }},
    {brand: "Hyundai", make: "Seltos", year: 2020,
    owner : {
        name: "hbavh",
        registration: "iwqgbf7279y"
    }},
    {brand: "Tata", make: "Harrier", year: 2019,
    owner : {
        name: "whefuo",
        registration: "hqw7398"
    }}
 ]

 write the code to access the year of making the tata car.

 console.log(cars[3].year);

 2. owner registration baleno car?
 console.log(cars[1].owner.registration);

 3. when to use square bracket notation to access object properties in JS?
 A. 1. The property is not a valid identifier(i.e; spaces, special characters)
 Eg: 
    const obj = {
        "some prop name": 345,
    }

############################################################################################
JS Part8: oops, Prototype, Prototype chain and JS Prototype Inheritance

Prototype
    prototype property
    prototype chains: __proto__
    understand inheritance through prototype

'this' keyword
    this is global scope in windows 
    in all other cases this points to the object in the current scope

OOPS:
    constructor functions(old class syntax)
    syntax:
        function Car(model) {
            this.model = model;
        }


#####################################################################
Important points

1. what is the o/p of below code?
    const obj = {
        print: function() {
            this.print();
        }
    }
A. StackOverflow will happen and we will get an error.

2.  Guess the o/p for the following?

const arr = [1, 2, 3, 4, 5];
Array.prototype.length = 10;
console.log(arr.length);

A. 5

3. Guess the o/p for the following?

const arr = [1, 2, 3, 4, 5];
Array.prototype.last = function() {
    const current_array = this;
    return current_array[current_array.length - 2];
}
console.log(arr.last()); // 4

A. 4

4. Guess the o/p for the following?

const object = {
    name: "some random object",
    val: 20
}
object.prototype.val = 30;
console.log(object.val);

A. Error
    object.prototype is undefined
    Note: We do not use prototype on instances but only on classes.

5. What is the top class in array class?
A. Object class

6. Given this object.
    const obj = {
        name: "john doe",
        age: 34
    };
How can we create a fresh copy of this object 'obj'?
A. const obj1 = Object.create(obj);



Article:

Primitive vs Refrence: https://neetishop.medium.com/copying-objects-in-javascript-8590e2d45c4

Map and reduce: https://www.youtube.com/watch?v=e-5obm1G_FY

#################################################################################################################

JS Part9: Math, String, DataTypes

Math
    PI 
    ceil(), floor(), round()
    max, min 
    random
    abs 
    exp 
    sqrt
    pow  

String

String.codePointAt()

    Ways of creating a string
        single quotes  ('hello world')
        double quotes  ("hello world")
        back quotes (`hello world`)

    toLowerCase(), toUpperCase()
    concate() 
    includes() 
    slice() 
    substr() 
    trim() 
    split() *

Date 
    UTC Time format and IST 
    Milliseconds elapsed 
    getDate()
    getHours()
    getMinutes()
    getSeconds()

###############################################
Important Notes

1. Guess the o/p of this code.

const arr = [20,-10,2.5,60];
console.log(Math.max(...arr))?
A. 60

2. Given the code
    const sentence = "I love to code";

    Write a one-liner code to break this sentence into words array.

A. const words = sentence.split(" ");  //['I', 'love', 'to', 'code']

3. What is the difference between the two lines?
    const date1 = Date("2022-08-11");
    const date2 = new Date("2022-08-11");

A. Date("2022-08-11") we are trying to parse the date into current local Time
    typeof will be string
    new Date("2022-08-11") we are trying to parse the date string but creating the 
    date object 
    This is the one we use to do operations on time.
    typeof will be object

################################################################################################
JS Part -10: BOM 

BOM Link: https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis


BOM (Browser Object Model)
    window object 
        global variables
        window.document object 
        window.innerHeight/window.innerWidth 
        window.open(), close(), moveTo(), resizeTo() 

    window history 
        back() 
        forward() 
        go() 
        length() 
    window.navigator 
        userAgent 
        appName, appVersion, appCodeName 
        platform 
        cookieEnabled 
        online
        geolocation 
    window.speechSynthesis
        window.speechSynthesis.speak(new SpeechSynthesisUtterance("hello"))

4. What's the difference b/w the below two lines?
console.local("hi");
window.console.local("hi");

A. No, there is no difference

5. Guess the o/p?
var a = 10;
console.log(++window.a);

A. 11

6. Guess the o/p?
function some_func() {
    var a = 20;
    console.log(window.a);
}
some_func();

7. How to find if a malicious website is accessing my cookies or not?

A. window.navigator.cookieEnabled
true -- accessing
false -- not accessing

Shallow copy link: https://neetishop.medium.com/copying-objects-in-javascript-8590e2d45c4

###############################################################################################################
JS Part-11: DOM 

Reference: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

DOM Basics
    DOM is JS representation of HTML structure. 
    HTML element and Node 
    window.onload event to work with DOM 
    HTML element
        textContent
        innerHTML

DOM Selectors 
    getElementByTagName()
    getElementByClassName()
    getElementById()
    querySelector()
    querySelectoeAll()

DOM create
    createElement()
    appendChild()
    createTextNode()


###########################
Important Questions

1. why do we write script tag in the bottom of the body?
A. So that we do DOM related operations only after the above HTML is loaded.
    However its always recommended to do after the window.onload event. 






