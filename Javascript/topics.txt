JS Part1: Intro, History and Declaring Variables
##################################################
1995: Netscape, Brendan Eich - founder of JS
Late 1990s: Dynamic HTML 
2008: Chrome and V8 (written in c++)
2009: nodejs (JS for server side development)
2011: jQuery
2012: JSON
2013: MongoDB (JS for database work)
2013: Proliferation of dozens of frameworks for frontend development (reacr, AngularJS, vue, EJS, webpack)
MERN stack
M - MongoDB
E - Express (REST APIs on HTTP)
R - React
N - Nodejs

webkit is for css
v8 is for JS

Problems with var:
1. It is Redeclarable
var a = 5;
var a = true;
2. var is function scope
3. var is hoisted
4. var is added as a property in window

Actual name of javascript is Ecmascript 
that's why JS versions have ES prefix.
for example: 
ES1995 or ES1
ES2015 or ES6
ES2016 or ES7
TC39 committee inside ECMA is responsible for handling the language specification for JS.

...
ES2021 or ES12 Latest Phase
ES2022 or ES13

https://javascript.info/

########################################################
JS-Part2

Functions in JS:
    - Ways of creating a function in JS
        1. Funtion Declaration
            fnction name() {
                //function body
            }
        2. Function Expression
            const name = function() {
                //function body
            }
        3. Arrow Function
            const name = () => {
                //function body
            }
    - Handling Arguments in JS
    -  Scope(Closure)
        1. Global Scope
        2. Function Scope
        3. Block Scope
            only followed by let and const but not for var
    -  Hoisting for var and function declarations

windows + shift + s -- shortcut to select the screenshot

Important Points
#####################################
1. which one should you use among var, let and const?
var shouldn't be used anymore. its not recommended.
let - if the variables value will change
const - if the variables value will never change

2. angular, react js will helps you to create html n css programmatically. Deals with the frontend of the application.
node js, express and MongoDB deals with the backend of the application.

3. Guess the output?
function test() {
    if(true) {
        var t = 1;
    }
    console.log(t * 5);
}
test();

A. No error

4. Guess the output?
function is_senior() {
    {
        const AGE_LIMIT = 60;
    }
    if(age > AGE_LIMIT) {
        return true;
    }
    else {
        return false;
    }
    
}
is_senior(58);

A. error - AGE_LIMIT is not accessible outside Block

5. What is the problem with this code?
let MAX_AGE = 60;
function is_senior() {
    let MAX_AGE = 55;
    if(age > MAX_AGE) {
        return true;
    }
    else {
        return false;
    }
}
is_senior(58);

A. Yes, error - MAX_AGE is already defined outside of the function.

6. What is the problem with this code?
var MAX_AGE = 60;
function is_senior() {
    var MAX_AGE = 55;
    if(age > MAX_AGE) {
        return true;
    }
    else {
        return false;
    }
}
is_senior(58);

A. No Error. But it is not recommended to create duplicate variables

7. How will this code be interpretedby compiler?

    i. 
        add(10, 20)
        function add(num1, num2) {
            return num1 + num2;
        } 
    a:  function add (num1, num2) {
            return num1 + num2;
        } 
        add(10,20);

    ii.
        function multiply_10(num) {
            a = 10;
            const result = num * a;
            a = 0;
            var a = 0;
            return result;
        }
    a: 
        function multiply_10(num) {
            a = undefined;
            const result = num * a;
            a = 0;
            var a = 0;
            return result;
        }

8. Does let and const allow hoisting?
No

####################################################

JS Part 3: Higher Order Functions, Call stack
#############################################

Higher order Functions
    These are functions which return or take another fnction as Arguments

Call Stack in JS:
    What it is?
        It's just an ordered list of function name which helps us see the execution trail
    Why it is used?
        It's used during debugging.

#####################################################
JS Part-4: DataTypes in JS

Primitive Values (immutable)
    Boolean Values
    Null type 
    undefined type
    number type
        64 bit double precision
    bigint type
    string type
    symbol type
Reference
    Objects
    Arrays
    Maps
    sets 

What is the use of undefined type?
1. is func a higher order function?
function print() {
    console.log("Hello World");
}
function func() {
    return function() {
        print();
    }
}

A: Yes, beacuse func is returning a function

2. does func have a valid callback?
function print() {
    console.log("Hello World");
}
function func() {
    print();
    callback();
}
A: No, because we not invoking callback in func

3. does func have a valid callback?
function print() {
    console.log("Hello World");
}
function func(callback) {
    print();
    callback();
}
A: Yes

4. What are closures in JS and why are they used?
Closures asre code construct where inordrr to make something(variable/ function)
private, we wrap it inside another function.
Eg: 
function closureFunction() {
    let somePrivateVar = 0;
    return function() {
        //using somePrivateVar;
    }
}


#################################################################################################
JS Part -6: Arrays

intro to Arrays
    class
    utility functions
    functions
    properties

Array properties
    array.length
    array.isArray()

array loop methods
    Map
    filter
    reduce
    forEach
    some
    every

Mutation functions in array
    array.push()
    array.pop()
    array.shift()
    array.unshift()
    array.slice()

Arrow Functions
    1. If single return statment then that return statement with curly braces can be ommitted.
            Example: 
            const add = (num1, num2) => {
                return num1 + num2;
            }
            const add = (num1, num2) => num1 + num2;

        2. If single argument then parenthesis can be ommitted.
            Example:
            const square = (num) => num * num;
            const square = num => num * num;

            
Important Notes:
############################################
1. In arrays, index starts from zero.
2. iterator function take a function as an Arguments
and signature for those functions argument is like below:
(item, index, arr) => {

}

2. please tell the o/p of the given code?
new Array(10).fill(5).filter(item => item %2 === 0);
a. arr is []
b. arr is [5,5]
c. arr is [5,5,5,5,5,5,5,5,5,5]

3. what are the difference b/w for loop and forEach loop?
A. 
i. forEach loop will execute for all items of the array always.
    but for loop can be discontinued earlier.
ii. we cannot break from forEach loop but we can break from for loop.
iii. forEach loop will not modify the array content while iterating over it
     but same will not applicable to for loop.


###########################################################################################
JS Part-7: Objects

Objects 
    Syntax of an object:
        {
            key1: value,
            key2: value,
            ..
            ..
        }
    Basics
        ways of accessing properties in an object
            1. Dot notation
                const obj = {name: "Lavs", age = 24}
                obj.name //Lavs
            2. [] square bracket notation
                const obj = {name: "Lavs", age = 24}
                obj["name"] //Lavs
    Data Structures
    Object class
Object Properties and methods
    object.keys()
    object.values()
    object.entries()
    object.hasOwnProperty()

###################################################################
Important Notes

1. Given this code
 const cars = [
    {brand: "Honda", make: "Jazz", year: 2018, 
    owner : {
        name: "Morpheus",
        registration: "awe17898"
    }},
    {brand: "Maruthi", make: "Baleno", year: 2022,
    owner : {
        name: "Mortin",
        registration: "awe1nks98"
    }},
    {brand: "Hyundai", make: "Seltos", year: 2020,
    owner : {
        name: "hbavh",
        registration: "iwqgbf7279y"
    }},
    {brand: "Tata", make: "Harrier", year: 2019,
    owner : {
        name: "whefuo",
        registration: "hqw7398"
    }}
 ]

 write the code to access the year of making the tata car.

 console.log(cars[3].year);

 2. owner registration baleno car?
 console.log(cars[1].owner.registration);

 3. when to use square bracket notation to access object properties in JS?
 A. 1. The property is not a valid identifier(i.e; spaces, special characters)
 Eg: 
    const obj = {
        "some prop name": 345,
    }

############################################################################################
JS Part8: oops, Prototype, Prototype chain and JS Prototype Inheritance

Prototype
    prototype property
    prototype chains: __proto__
    understand inheritance through prototype

'this' keyword
    this is global scope in windows 
    in all other cases this points to the object in the current scope

OOPS:
    constructor functions(old class syntax)
    syntax:
        function Car(model) {
            this.model = model;
        }


#####################################################################
Important points

1. what is the o/p of below code?
    const obj = {
        print: function() {
            this.print();
        }
    }
A. StackOverflow will happen and we will get an error.

2.  Guess the o/p for the following?

const arr = [1, 2, 3, 4, 5];
Array.prototype.length = 10;
console.log(arr.length);

A. 5

3. Guess the o/p for the following?

const arr = [1, 2, 3, 4, 5];
Array.prototype.last = function() {
    const current_array = this;
    return current_array[current_array.length - 2];
}
console.log(arr.last()); // 4

A. 4

4. Guess the o/p for the following?

const object = {
    name: "some random object",
    val: 20
}
object.prototype.val = 30;
console.log(object.val);

A. Error
    object.prototype is undefined
    Note: We do not use prototype on instances but only on classes.

5. What is the top class in array class?
A. Object class

6. Given this object.
    const obj = {
        name: "john doe",
        age: 34
    };
How can we create a fresh copy of this object 'obj'?
A. const obj1 = Object.create(obj);



Article:

Primitive vs Refrence: https://neetishop.medium.com/copying-objects-in-javascript-8590e2d45c4

Map and reduce: https://www.youtube.com/watch?v=e-5obm1G_FY

#################################################################################################################

JS Part9: Math, String, DataTypes

Math
    PI 
    ceil(), floor(), round()
    max, min 
    random
    abs 
    exp 
    sqrt
    pow  

String

String.codePointAt()

    Ways of creating a string
        single quotes  ('hello world')
        double quotes  ("hello world")
        back quotes (`hello world`)

    toLowerCase(), toUpperCase()
    concate() 
    includes() 
    slice() 
    substr() 
    trim() 
    split() *

Date 
    UTC Time format and IST 
    Milliseconds elapsed 
    getDate()
    getHours()
    getMinutes()
    getSeconds()

###############################################
Important Notes

1. Guess the o/p of this code.

const arr = [20,-10,2.5,60];
console.log(Math.max(...arr))?
A. 60

2. Given the code
    const sentence = "I love to code";

    Write a one-liner code to break this sentence into words array.

A. const words = sentence.split(" ");  //['I', 'love', 'to', 'code']

3. What is the difference between the two lines?
    const date1 = Date("2022-08-11");
    const date2 = new Date("2022-08-11");

A. Date("2022-08-11") we are trying to parse the date into current local Time
    typeof will be string
    new Date("2022-08-11") we are trying to parse the date string but creating the 
    date object 
    This is the one we use to do operations on time.
    typeof will be object

################################################################################################
JS Part -10: BOM 

BOM Link: https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis


BOM (Browser Object Model)
    window object 
        global variables
        window.document object 
        window.innerHeight/window.innerWidth 
        window.open(), close(), moveTo(), resizeTo() 

    window history 
        back() 
        forward() 
        go() 
        length() 
    window.navigator 
        userAgent 
        appName, appVersion, appCodeName 
        platform 
        cookieEnabled 
        online
        geolocation 
    window.speechSynthesis
        window.speechSynthesis.speak(new SpeechSynthesisUtterance("hello"))

4. What's the difference b/w the below two lines?
console.local("hi");
window.console.local("hi");

A. No, there is no difference

5. Guess the o/p?
var a = 10;
console.log(++window.a);

A. 11

6. Guess the o/p?
function some_func() {
    var a = 20;
    console.log(window.a);
}
some_func();

7. How to find if a malicious website is accessing my cookies or not?

A. window.navigator.cookieEnabled
true -- accessing
false -- not accessing

Shallow copy link: https://neetishop.medium.com/copying-objects-in-javascript-8590e2d45c4

###############################################################################################################
JS Part-11: DOM 

Reference: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

DOM Basics
    DOM is JS representation of HTML structure. 
    HTML element and Node 
    window.onload event to work with DOM 
    HTML element
        textContent
        innerHTML

DOM Selectors 
    getElementByTagName()
    getElementByClassName()
    getElementById()
    querySelector()
    querySelectoeAll()

DOM create
    createElement()
    appendChild()
    createTextNode()


###########################
Important Questions

1. why do we write script tag in the bottom of the body?
A. So that we do DOM related operations only after the above HTML is loaded.
    However its always recommended to do after the window.onload event. 

###############################################################################################################
JS Part-12: DOM Events

Mouse events: 
    https://javascript.info/mouse-events-basics

Event argument
    Example:  
        document.onclick = function(event) {
            // use event object here
        }

Three ways of working with Events in javascript
    1. Inline attribute
        <div onclick="click_handler()">

    2. object property
        Syntax:
            const someDiv = document.getElementById('someDiv');
            someDiv.onclick = function() {

            }
            
    3. addEventListener()
        Syntax: 
            const someDiv = document.getElementById('someDiv');
            someDiv.addEventListener('click', click_handler);

DOM Events
    Mouse  Events
        onclick	occurs when element is clicked.
        ondblclick	occurs when element is double-clicked.
        onmouseover	occurs when mouse is moved over an element.
        onmouseout	occurs when mouse is moved out from an element (after moved over).
        onmousedown	occurs when mouse button is pressed over an element.
        onmouseup	occurs when mouse is released from an element (after mouse is pressed).
  
    Keyboard events
        onkeydown	occurs when key is being pressed.
        onkeypress	occurs when user presses the key.
        onkeyup	occurs when key is released.

    Form Input related events
        onfocus	occurs when an element gets focus such as button, input, textarea etc.
        onblur	occurs when form looses the focus from an element.
        onsubmit	occurs when form is submitted.
        onreset	occurs when form is reset.
   
   
    onscroll	occurs when document is scrolled.
    onload	occurs when document, object or frameset is loaded.
    onunload	occurs when body or frameset is unloaded.
    onresized	occurs when document is resized.


###############################################################
Important Points

1. Among 3 ways to add events why would the addEventListener is prefered?
A. The benefits of addEventListener are 
    1. can attach multiple event handler functions for same event.
    2. we can control capturing / bubbling.



#########################################################################################
Part-13: Event Bubbling vs Capture and Event Delegation
    Event Bubbling vs Capture
    Event Delegation
        It's a way to utilize Event Bubbling and prevent ourselves from attaching 
        eventListeners to all the child items.

        We basically delegate, the task of event handling to the parent.

        Example:  parent and child can be any html element 
            <parent>
            <child></child>
            <child></child>
            <child></child>
            </parent>

            parent.onclick = function(event) {
                //use the event.target property to access the child items
            }

Table of seconds:
    10 milli = 1 centi 
    10 centi = 1 deci
    10 deci  = 1 second
    10 second = 1 deca
    10 deca	 = 1 hecto 
    10 hecto = 1 kilo

Type Casting
    Explicit Type casting
        String


    Implicit Type Casting
        Examples:
            addition with string



################################################################################
Important Points

1. Is event bubbling a default behavior?
A. Yes, if we haven't specified anything then event bubbling will be default.

2. How to stop event bubbling for a div element in a website?
A. we can use event.stopPropagation() function.

3. Please share examples of Implicit type casting in JS
A. 
    1. String addition with other DataTypes
        "abc" + 45 = "abc45"
        true + '' = 'true'

    2. Boolean implict type casting inside if()
        if(null) -> if(Boolean(null)) -> if(false)

imgur --- to upload images 
datamuse -- api
######################################################################
JS Part-14: Async, callbacks and Promise

Async JS
    Synchronous vs Asynchronous JS
    Problem with Synchronous JS 
        UI blocking due to single threaded nature of JS

callbacks
    callback hell

Promise 
    Intro
    Why Promise?


#########################################################
Important Topics 

1. write a sample async code in JS
A. We can use setTimeout function to simulate a async code.

setTimeout(function() {
    //anything done being asynchronously
}, 0)

2. Guess the output?
let a = 10;

setTimeout(function() {
    a += 20;
});
console.log(a);

A. 10

3. Guess the output.

let a = 10;
function something(cb) {
    cb();
    console.log(a);
}
something(function() {
    a = 20;
    console.log(a);
})
A. 20 20 

4. Guess the output.

let a = 10;
function something(cb) {
    console.log(a);
}
something(function() {
    a = 20;
    console.log(a);
})

A. 10

5. Guess the output

let str = "abc";
function something(cb) {
    str += 'xyz';
    cb(str + '123');
}

something(function() {
    console.log(str);
})

A. abcxyz

6. Guess the output

let str = "abc";
function something(cb) {
    str += 'xyz';
    cb(str + '123');
}

something(function(somestr) {
    console.log(somestr);
})

A. abcxyz123


7. What is callback hell and how to avoid it?
A. Callback hell is problematic situation when working with async code 
    using callbacks. We end up with a code with deep nested callbacks which makes 
    code maintainably a difficult task.

    We can use Promises to avoid callback hells.

8. Guess the output.

const promise = new Promise((a, b) => {
    b(25);
    a(23);
});

promise.then(
    (response) => {
        console.log("All is well: " + response)
    },

    (response) => {
        console.log("Something failed: " + response)
    })
A. Something failed: 25 

9. Guess the output

const promise = new Promise((a, b) => {
    a("hello");
});

promise.then(
    (response) => {
        console.log(response)
    })
A. hello 


#######################################################################################
JS Part 15: Try Catch, Async Await

Try catch 
    used for Error Handling 
    Syntax:
    try {
        //error prone code here
    } catch(error) {
        //error handling code here
    } finally {
        //Always execute
    }

Catch block in Promise
    some_promise 
        .then(() => {
            //some operation
        })
        .then(() => {
            //some operation
        })
        .catch((error) => {  
            //handle the error here
        }) 
        .finally(() => {

        })

Async Await 
    An async function is a function declared with the async keyword,
    and the await keyword is permitted within it. The async and await 
    keywords enable asynchronous, promise-based behavior to be written
    in a cleaner style, avoiding the need to explicitly configure 
    promise chains.


JSON 
    It's a data exchange language format based on JS object.
    It's basically a string that looks exactly like a JS object.

    Datatypes supported by JSON
        Array
        Objects
        String 
        Number 
        Boolean 
        Null 

    JSON notation 
    Syntax: 
    {
        "prop": value 

    }
    JSON.stringify()
    JSON.parse()

#####################################################################################
Important Questions

1. Guess the output?
try {
    const a = 23;
    a += 2;
    console.log(a);
} catch(error) {
    console.log(a);
}

A. undefined 
Since a is declared inside the try block, 
a is not accessible to catch block.

2. Guess the output?

let a = 10;
try {
    console.log(a);
    a += 2;
} catch(error) {
    console.log(a);
}
console.log(a);

A. 10 
   12

3. Guess the output?

const a = 10;
try {
    console.log(a);
    a += 2;
} catch(error) {
    console.log(a);
}
console.log(a);

A. 10 
   10
   10
Since a is declared outside the try block, 
a is accessible to catch block.

4. Guess the output?

let s = 'a';
try {
    console.log(s);
    s.concat('b');
} catch(error) {
    console.log(s);
    s = s.concat('c');
} finally {
    s += 'd';
}
console.log(s);

A. a 
   a 
   acd 

5. Guess the output?

new Promise((a) => {
    a(10);
})
.then(val => {
    console.log(val * 10);
})
.then(val => {
    console.log(val * 20);
})
.catch((e) => {
    console.log(a);
})
.finally(
    console.log(a);
}

A. 100
   NaN    //not returing any value in previous then block
   undefined 

6. Guess the output?

new Promise((a) => {
    a(10);
})
.then(val => {
    console.log(val * 10);
    return val * 10;
})
.then(val => {
    console.log(val * 20);
})
.catch((e) => {
    console.log(a);
})
.finally {
    console.log(a);
}

A.  100
    20000
    undefined 

7. Guess the output?

new Promise((a) => {
    a(10);
})
.then(val => {
    console.log(val * 10);
    return val * 10;
})
.then(val => {
    console.log(val * 20);
    val.NonExistingFunction();
})
.catch((e) => {
    console.log("Catch Block");
})
.finally((a) => {
    console.log("Finally Block");
})

A.  100
    2000
    Catch Block
    Finally Block

8. Guess the output?

new Promise((a, b) => {
    b(20);
    a(10);
})
.then(val => {
    console.log(val * 10);
    return val * 10;
})
.then(val => {
    console.log(val * 20);
    val.NonExistingFunction();
})
.catch((e) => {
    console.log("Catch Block");
})
.finally((a) => {
    console.log("Finally Block");
})

A.  Catch Block 
    Finally Block 

9. What's the problem with this code?

async function print_hello() {
    return new Promise((a, b) => {
        a("hello there");
    })
}

const result = await print_hello_async();
console.log(result);

A.  This code has 2 problems..
1. print_hello_async() doesn't need to have async keyword as 
we are not doing any await operation inside.
2. We are doing await operation in the global scope.
   await operations require an async function wrapper.

10. Guess the output?

function wait() {
    return new Promise((a, b) => {
        setTimeout(() => {
            a(20);
        }, 3000);
    })
}

async function func_async() {
    const result = wait();
    console.log(result);
}

func_async();

A. const result = await wait();

Use await inside func_async()

######################################################################
JS Part-16: ES6 

What is ES6? 
    It's JavaScript version released in 2015
    Full Form is EcmaScript Version 6.
    ES1
    ES2
    ES3
    ES4
    ES5
    ES6 -2015
    ES7 -2016
    ES8 -2017
    ES9 -2018
    ES10 -2019
    ES11 -2020
    ES12 -2021
    ES13 -2022

The version after ES6 are also called ES6+ versions 

Spread and rest operator(...)
Newer for loops
    for-in loops
    for-of loops
Property shorthand
    syntax:
          var x = 0, y = 0
          obj = {x, y} => {x: 0, y: 0}
Destructruring
    In arrays
    In In objects 

Getters and Setters 
class
     static methods
     method overiding
     super 
     constructor 
     inheritance
this 
    lexical scoping of this in arrow functions 


###############################################################
Important Notes

1. Guess the output?
 
const obj = {
    ids: [10,21,11,31,41],
    area: 'zone1'
}
const obj2 = {level: 3}
console.log({...obj, ...obj2})

A.  { ids: [ 10, 21, 11, 31, 41 ], area: 'zone1', level: 3 }

2. Guess the output?
 
 function find_length(...args) {
    return args.length;
 }
 console.log(find_length(1,2,3,[1,2,3]))

 A. 4
 4 because args [1,2,3] is treated as a single value 

3. Guess the output?
 
 function find_length(...args) {
    return args.length;
 }
 const arr = ['a', 'b', 'c']
 console.log(find_length(1,2,3,...arr))

 A. 6
 because args is [1, 2, 3,'a', 'b', 'c']

 4. Guess the output?

 const employee = {
    name: 'Roger',
    department: 'sales'
 }
const contacts = ['david']
const new_employee = {
    ...employee,
    contacts: [...contacts]
}
console.log(new_employee);

A. {name: 'Roger', department: 'sales', contacts: [ 'david' ]} 

5. Guess the output?

const a = {a: 1};
const b = {b: 2};
const c = {c: 2};

console.log({a: a.a, ...b, ...c});

A. {a: 1, b: 2, c: 2}














