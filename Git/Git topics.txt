Git:
Use case:
1. Track file changes
2. Going back in file history
3. Collaborating with manu people on same project

Git Stages:
1. Untracked (new file), Modified (modifies existing one)
2. Staging
3. Commit

Branching:
Creating branches
Merging Branches

GitHub:
1. Central Online Repository
2. Easy Collaboration

Working in GitHub:
1. Push from local machine
2. Pull from remote github

git remote add origin
git branch -v

git remote add origin https://github.com/lavanyatalluri61/NSProject.git
git branch -M main
git push -u origin main

Doing open source contribution via giithub
steps to collaborate
1. clone the repo in your machine
git clone https://github.com/lavanyatalluri61/NSProject
2. create your own branch
git checkout -b "branchname"
3. Add the file changes in that branch and commit them
4. push the branch to github
git push origin branchname
5. create a pull request(PR) using github

6. Get the latest changes in master
		// Commit the changes in your branch
		git checkout master
		git pull origin master
		git checkout Alok-Branch
		git merge master
		git push origin Alok-branch


Git:
1. Installation
2. Configuration(add name and mail)
git config --global user.name "FIRST_NAME LAST_NAME"
git config --global user.email "john@example.com"


In Powershell:
git --version
next config commands 
create a folder and go to the corresponding folder
copy the folder and in powershell cd "folder path"
git init
git status
git add folder or file name
git commit -m "message"
git log (what changes we made in the file or folder will be displayed)
git push origin Alok-branch

